name: deploy-monitoring

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CLUSTER: k8s-cash-track
  NAMESPACE: cash-track
  KUBECTL_BIN: ${{ vars.KUBECTL_BIN_URL }}

jobs:
  mysql-exporter:
    name: mysql-exporter
    runs-on: [self-hosted, Linux, x64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/mysql-exporter/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/mysql-exporter

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=mysql-exporter --for condition=Ready --timeout=60s

  prometheus:
    name: prometheus
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap prometheus-configs --from-file=$GITHUB_WORKSPACE/services/prometheus/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/prometheus/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod prometheus-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=prometheus --for condition=Ready --timeout=60s

  grafana-build:
    name: grafana-build
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      REPO: cashtrack/grafana
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Setup BuildX
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          install: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./services/grafana
          push: true
          tags: ${{ env.REPO }}:latest

  grafana:
    name: grafana
    runs-on: [ self-hosted, Linux, x64 ]
    needs:
      - grafana-build
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap grafana-configs --from-file=$GITHUB_WORKSPACE/services/grafana/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/grafana/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod grafana-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=grafana --for condition=Ready --timeout=60s

  grafana-loki:
    name: grafana-loki
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap grafana-loki-configs --from-file=$GITHUB_WORKSPACE/services/grafana-loki/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/grafana-loki/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod grafana-loki-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=grafana-loki --for condition=Ready --timeout=60s

  grafana-tempo:
    name: grafana-tempo
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap grafana-tempo-configs --from-file=$GITHUB_WORKSPACE/services/grafana-tempo/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/grafana-tempo/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod grafana-tempo-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=grafana-tempo --for condition=Ready --timeout=60s

  promtail:
    name: promtail
    runs-on: [ self-hosted, Linux, x64 ]
    needs:
      - grafana-loki
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap promtail-configs --from-file=$GITHUB_WORKSPACE/services/promtail/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/promtail/
          kubectl rollout -n ${{ env.NAMESPACE }} restart daemonset/promtail

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status daemonset/promtail

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=promtail --for condition=Ready --timeout=60s

  node-exporter:
    name: node-exporter
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/node-exporter/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status daemonset/node-exporter

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=node-exporter --for condition=Ready --timeout=60s

  alertmanager:
    name: alertmanager
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Configure secrets
        run: |
          sed -i 's|<TELEGRAM_ALERT_BOT_TOKEN>|'${{ secrets.TELEGRAM_ALERT_BOT_TOKEN }}'|' $GITHUB_WORKSPACE/services/alertmanager/configs/config.yml
          sed -i 's|<TELEGRAM_MONITORING_CHAT_ID>|'${{ secrets.TELEGRAM_MONITORING_CHAT_ID }}'|' $GITHUB_WORKSPACE/services/alertmanager/configs/config.yml

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap alertmanager-configs --from-file=$GITHUB_WORKSPACE/services/alertmanager/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/alertmanager/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod alertmanager-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=alertmanager --for condition=Ready --timeout=60s
