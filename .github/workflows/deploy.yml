name: deploy

on:
  push:
    branches:
      - main
  release:
    types: [ published ]

env:
  CLUSTER: k8s-cash-track
  NAMESPACE: cash-track
  KUBECTL_BIN: https://storage.googleapis.com/kubernetes-release/release/v1.24.4/bin/linux/amd64/kubectl

jobs:
  common:
    name: common
    runs-on: [self-hosted, Linux, x64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply
        run: kubectl apply -R -f $GITHUB_WORKSPACE/common/

  mysql:
    name: mysql
    runs-on: [self-hosted, Linux, x64]
    needs:
      - common
    env:
      REPO: cashtrack/mysql
      GIT_REPO: https://github.com/cash-track/mysql
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch current release
        id: release
        run: echo "::set-output name=tag::$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")"

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/mysql/statefulset.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/mysql/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod mysql-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=mysql --for condition=Ready --timeout=60s

  redis:
    name: redis
    runs-on: [self-hosted, Linux, x64]
    needs:
      - common
    env:
      REPO: cashtrack/redis
      GIT_REPO: https://github.com/cash-track/redis
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch current release
        id: release
        run: echo "::set-output name=tag::$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")"

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/redis/statefulset.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/redis/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod redis-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=redis --for condition=Ready --timeout=60s

  api:
    name: api
    runs-on: [self-hosted, Linux, x64]
    needs:
      - mysql
      - redis
    env:
      REPO: cashtrack/api
      GIT_REPO: https://github.com/cash-track/api
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch current release
        id: release
        run: echo "::set-output name=tag::$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")"

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/api/deployment.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/api/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/api

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=api --for condition=Ready --timeout=30s

  website:
    name: website
    runs-on: [self-hosted, Linux, x64]
    needs:
      - api
    env:
      REPO: cashtrack/website
      GIT_REPO: https://github.com/cash-track/website
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch current release
        id: release
        run: echo "::set-output name=tag::$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")"

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/website/deployment.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/website/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/website

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=website --for condition=Ready --timeout=30s

  frontend:
    name: frontend
    runs-on: [self-hosted, Linux, x64]
    needs:
      - api
    env:
      REPO: cashtrack/frontend
      GIT_REPO: https://github.com/cash-track/frontend
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch current release
        id: release
        run: echo "::set-output name=tag::$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")"

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/frontend/deployment.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/frontend/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/frontend

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=frontend --for condition=Ready --timeout=30s

  mysql-backup:
    name: mysql-backup
    runs-on: [self-hosted, Linux, x64]
    needs:
      - mysql
    env:
      REPO: cashtrack/mysql-backup
      GIT_REPO: https://github.com/cash-track/mysql-backup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch current release
        id: release
        run: echo "::set-output name=tag::$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")"

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/mysql-backup/deployment.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/mysql-backup/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/mysql-backup

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=mysql-backup --for condition=Ready --timeout=30s

  mysql-exporter:
    name: mysql-exporter
    runs-on: [self-hosted, Linux, x64]
    needs:
      - mysql
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/mysql-exporter/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/mysql-exporter

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=mysql-exporter --for condition=Ready --timeout=30s

  prometheus:
    name: prometheus
    runs-on: [ self-hosted, Linux, x64 ]
    needs:
      - common
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap prometheus-configs --from-file=$GITHUB_WORKSPACE/services/prometheus/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/prometheus/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod prometheus-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=prometheus --for condition=Ready --timeout=60s

  grafana-build:
    name: grafana-build
    runs-on: [ self-hosted, Linux, x64 ]
    env:
      REPO: cashtrack/grafana
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Setup BuildX
        uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./services/grafana
          push: true
          tags: ${{ env.REPO }}:latest

  grafana:
    name: grafana
    runs-on: [ self-hosted, Linux, x64 ]
    needs:
      - common
      - grafana-build
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap grafana-configs --from-file=$GITHUB_WORKSPACE/services/grafana/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/grafana/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod grafana-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=grafana --for condition=Ready --timeout=60s

  node-exporter:
    name: node-exporter
    runs-on: [ self-hosted, Linux, x64 ]
    needs:
      - common
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/node-exporter/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status daemonset/node-exporter

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=node-exporter --for condition=Ready --timeout=30s

  alertmanager:
    name: alertmanager
    runs-on: [ self-hosted, Linux, x64 ]
    needs:
      - common
    env:
      NAMESPACE: monitoring
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Configure secrets
        run: |
          sed -i 's|<TELEGRAM_ALERT_BOT_TOKEN>|'${{ secrets.TELEGRAM_ALERT_BOT_TOKEN }}'|' $GITHUB_WORKSPACE/services/alertmanager/configs/config.yml
          sed -i 's|<TELEGRAM_MONITORING_CHAT_ID>|'${{ secrets.TELEGRAM_MONITORING_CHAT_ID }}'|' $GITHUB_WORKSPACE/services/alertmanager/configs/config.yml

      - name: Apply definition
        run: |
          kubectl create -n ${{ env.NAMESPACE }} configmap alertmanager-configs --from-file=$GITHUB_WORKSPACE/services/alertmanager/configs -o yaml --dry-run=client | kubectl apply -f -
          kubectl apply -f $GITHUB_WORKSPACE/services/alertmanager/

      - name: Deploy service
        run: kubectl -n ${{ env.NAMESPACE }} delete pod alertmanager-0

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=alertmanager --for condition=Ready --timeout=60s
