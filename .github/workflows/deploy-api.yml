name: deploy-api

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (default last)'
        type: string
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  CLUSTER: k8s-cash-track
  NAMESPACE: cash-track
  KUBECTL_BIN: https://storage.googleapis.com/kubernetes-release/release/v1.27.4/bin/linux/amd64/kubectl

jobs:
  api:
    name: api
    runs-on: [self-hosted, Linux, x64]
    env:
      REPO: cashtrack/api
      GIT_REPO: https://github.com/cash-track/api
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install kubectl
        run: |
          curl -LO ${{ env.KUBECTL_BIN }}
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER }}

      - name: Fetch latest release tag
        id: latest
        run: echo "tag=$(git ls-remote --refs --sort='version:refname' --tags ${{ env.GIT_REPO }} | cut -d/ -f3- | tail -n1 | sed -e "s/^v//")" >> $GITHUB_OUTPUT

      - name: Set image tag
        id: release
        env:
          INPUT_TAG: ${{ inputs.tag }}
          LATEST_TAG: ${{ steps.latest.outputs.tag }}
        run: echo "tag=$([ -z $INPUT_TAG ] && echo $LATEST_TAG || echo $INPUT_TAG)" >> $GITHUB_OUTPUT

      - name: Update deployment
        env:
          IMAGE: ${{ env.REPO }}:${{ steps.release.outputs.tag }}
        run: sed -i 's|${{ env.REPO }}:latest|'${IMAGE}'|' $GITHUB_WORKSPACE/services/api/deployment.yml

      - name: Apply definition
        run: kubectl apply -f $GITHUB_WORKSPACE/services/api/

      - name: Verify deployment
        run: kubectl -n ${{ env.NAMESPACE }} rollout status deployment/api

      - name: Verify service ready
        run: kubectl -n ${{ env.NAMESPACE }} wait pods -l app=api --for condition=Ready --timeout=120s
